#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Basic UI Configuration
** Ui Elements

#+begin_src emacs-lisp 

  (defvar jef/default-font-size 160)

  (setq inhibit-startup-message t)
  (setq visible-bell t) 

  (setq custom-file "~/.config/emacs/custom.el")
  (load custom-file)

  (scroll-bar-mode -1)   ; Disable visible scrollbar
  (tool-bar-mode -1)     ; Disable the toolbar
  (menu-bar-mode -1)     ; Disable the menu bar
  (tooltip-mode -1)      ; Disable tooltips
  (set-fringe-mode 10)   ; Give some breathing room

  (column-number-mode)
  (global-display-line-numbers-mode t)
  (setq display-line-numbers 'relative)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Font Configuration

#+begin_src emacs-lisp 

  (set-face-attribute 'default nil :font "MesloLGS NF" :height 160)
  (set-face-attribute 'fixed-pitch nil :font "Monaco" :height 160)
  (set-face-attribute 'variable-pitch nil :font "Microsoft Sans Serif" :height 160)
  (set-face-attribute 'mode-line nil :family "Noto Sans" :height 140)
  (set-face-attribute 'mode-line-inactive nil :family "Noto Sans" :height 140)
#+end_src

* Package Configuration
** Use Package

#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")
                           ("gnu-devel" . "https://elpa.gnu.org/devel/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** Ivy

#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
	 :map ivy-minibuffer-map
	 ("TAB" . ivy-alt-done)
	 ("C-l" . ivy-alt-done)
	 ("C-j" . ivy-next-line)
	 ("C-k" . ivy-previous-line)
	 :map ivy-switch-buffer-map
	 ("C-k" . ivy-previous-line)
	 ("C-l" . ivy-done)
	 ("C-d" . ivy-switch-buffer-kill)
	 :map ivy-reverse-i-search-map
	 ("C-k" . ivy-previous-line)
	 ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))
#+end_src

** Counsel

#+begin_src emacs-lisp
(use-package counsel
  :bind (("M-x" . counsel-M-x)
	 ("C-x b" . counsel-ibuffer)
	 ("C-x C-f" . counsel-find-file)
	 :map minibuffer-local-map
	 ("C-r" . 'counsel-minibuffer-history))
  :config
  (setq ivy-initial-inputs-alist nil))
#+end_src

** Doom Modeline

First time this config is loaded on a new machine, run the command =M-x all-the-icons-install-fonts=
#+begin_src emacs-lisp
(use-package all-the-icons)

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))

(setq doom-modeline-height 15)
#+end_src

** Doom Themes

#+begin_src emacs-lisp
(use-package doom-themes
  :init (load-theme 'doom-gruvbox t))
#+end_src

** Rainbow Delimiters

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Which Key

#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))
#+end_src

** Helpful

#+begin_src emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

** Evil

#+begin_src emacs-lisp
(defun jef/evil-hook ()
  (dolist (mode '(custom-mode
		  eshell-mode
		  term-mode))
    (add-to-list 'evil-emacs-state-modes mode)))

(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :hook (evil-mode . jef/evil-hook)
  :config
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
  (define-key evil-normal-state-map (kbd ";") 'evil-ex)

  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(evil-mode 1)

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src

** Keybindings
*** General

#+begin_src emacs-lisp
(defun jef/load-init-el ()
  (interactive)
  (find-file "~/.emacs.d/init.el"))

(defun jef/load-tasks-file ()
  (interactive)
  (find-file "~/personal/OrgDatabase/Tasks.org"))

(defun jef/load-org-index ()
  (interactive)
  (find-file "~/personal/OrgDatabase/Index.org"))

(use-package general
  :config
  (general-create-definer jef/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (general-create-definer jef/emacs-base
    :keymaps '(normal insert visual emacs)
    :prefix "C-,"
    :globa-prefix "C-S-,")

  (jef/leader-keys
   "t" '(:ignore t :which-key "toggles")
   "tt" '(counsel-load-theme :which-key "choose theme")
   "a" '(:ignore t :which-key "agenda")
   "aa" '(org-agenda :which-key "Open Agenda")
   "at" '(counsel-org-tag :which-key "Add Tag")
   "as" '(org-shiftright :which-key "Cycle Labels"))

  (jef/emacs-base
   "s" '(:ignore t :which-key "source")
   "se" '(jef/load-init-el :which-key "Edit init.el")
   "st" '(jef/load-tasks-file :which-key "Edit Tasks.org")
   "si" '(jef/load-org-index :which-key "Edit Index.org")))

(general-evil-setup)
(general-imap "k"
  (general-key-dispatch 'self-insert-command
    :timeout 0.2
    "j" 'evil-normal-state))
#+end_src

*** Hydra
#+begin_src emacs-lisp
(use-package hydra)

(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))

(jef/leader-keys
  "ts" '(hydra-text-scale/body :which-key "scale text"))
#+end_src

** VTerm

#+begin_src emacs-lisp
(use-package vterm)
#+end_src

* Development
** Projectile

#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/projects")
    (setq projectile-project-search-path '("~/projects" "~/study" "~/personal")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :config (counsel-projectile-mode))
#+end_src

** Magit

#+begin_src emacs-lisp
(use-package magit
  :commands (magit-status magit-get-current-branch)
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

** Language Servers
*** LSP Mode

#+begin_src emacs-lisp
  (defun jef/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . jef/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (set-face-attribute 'lsp-headerline-breadcrumb-path-face nil :inherit 'fixed-pitch)
    (lsp-enable-which-key-integration t))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom)
    (lsp-ui-peek-show-directory nil)
    :config
    (jef/leader-keys "tr" '(lsp-ui-peek-find-references :which-key "Find References")))

  (use-package lsp-ivy)
#+end_src

*** Company

#+begin_src emacs-lisp
  (use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
              ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
              ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src

*** Treemacs

#+begin_src emacs-lisp
  (use-package lsp-treemacs
    :after lsp)
#+end_src

*** Typescript

#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))
#+end_src

* Org Mode
** Basic Setup

#+begin_src emacs-lisp
(defun jef/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (auto-fill-mode 0)
  (visual-line-mode 1)
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  (setq org-hide-emphasis-markers t)
  (setq evil-auto-indent nil))
#+end_src

** Fonts
#+begin_src emacs-lisp
(defun jef/org-font-setup ()

  (dolist (face '((org-level-1 . 1.2)
  		(org-level-2 . 1.1)
  		(org-level-3 . 1.05)
  		(org-level-4 . 1.0)
  		(org-level-5 . 1.1)
  		(org-level-6 . 1.1)
  		(org-level-7 . 1.1)
  		(org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Microsoft Sans Serif" :weight 'regular :height (cdr face)))
  
  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-date nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src

** Auto-tangle Configuration Files
#+begin_src emacs-lisp
  (defun jef/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.config/emacs/EmacsConfig.org"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook
            (lambda () (add-hook 'after-save-hook #'jef/org-babel-tangle-config)))
#+end_src

** Agenda

#+begin_src emacs-lisp
(use-package org
  :hook (org-mode . jef/org-mode-setup)
  :config
  (setq org-ellipsis " ▾")
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-agenda-files
	'("~/personal/OrgDatabase/Tasks.org"
	  "~/personal/OrgDatabase/Birthdays.org"))

  (setq org-todo-keywords
	'((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
	  (sequence "APPOINTMENT(a)" "|" "COMPLETED(c)")
	  (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "|" "COMPLETED(c)" "CANC(k@)")))

  (setq org-refile-targets
	'(("Archive.org" :maxlevel . 1)
	  ("Tasks.org" :maxlevel . 1)))

  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  (setq org-tag-alist
	'((:startgroup)
					;mutually exclusive tags go here
	  (:endgroup)
	  ("home" . ?h)
	  ("work" . ?w)
	  ("recurring" . ?r)))
  
  (setq org-agenda-custom-commands
	'(("d" "Dashboard"
	   ((agenda "" ((org-deadline-warning-days 7)))
	    (todo "NEXT"
	 	 ((org-agenda-overriding-header "Next Tasks")))
	    (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

	  ("n" "Next Tasks"
	   ((todo "NEXT" ((org-agenda-overriding-header "Next Tasks")))))

	  ("A" "Appointments"
	   ((agenda "APPOINTMENT" ((org-agenda-overriding-header "Appointments")
				 (org-deadline-warning-days 7)))))

	  ("W" "Work Tasks" tags-todo "+work")

	  ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&Effort>0"
	   ((org-agenda-overriding-header "Low Effort Tasks")
	    (org-agenda-max-todos 20)
	    (org-agenda-files org-agenda-files)))

	  ("g" "German"
	   ((todo "TODO" ((org-agenda-overriding-header "German Lessons")
			  (org-agenda-files '("~/personal/OrgDatabase/German/DeutschToGo.org"))))))
	  

	  ("w" "Workflow Status"
	   ((todo "WAIT"
		  ((org-agenda-overriding-header "Waiting on External")
		   (org-agenda-files org-agenda-files)))
	    (todo "REVIEW"
		  ((org-agenda-overriding-header "In Review")
		   (org-agenda-files org-agenda-files)))
	    (todo "PLAN"
		  ((org-agenda-overriding-header "In Planning")
		   (org-agenda-todo-list-sublevels nil)
		   (org-agenda-files org-agenda-files)))
	    (todo "BACKLOG"
		  ((org-agenda-overriding-header "Project Backlog")
		   (org-agenda-todo-list-sublevels nil)
		   (org-agenda-files org-agenda-files)))
	    (todo "READY"
		  ((org-agenda-overriding-header "Ready for Work")
		   (org-agenda-files org-agenda-files)))
	    (todo "ACTIVE"
		  ((org-agenda-overriding-header "Active Projects")
		   (org-agenda-files org-agenda-files)))
	    (todo "COMPLETED"
		  ((org-agenda-overriding-header "Completed Projects")
		   (org-agenda-files org-agenda-files)))
	    (todo "CANC"
		  ((org-agenda-overriding-header "Cancelled Projects")
		   (org-agenda-files org-agenda-files)))))))

#+end_src

** Captures

#+begin_src emacs-lisp
  (setq org-capture-templates
	`(("t" "Tasks / Projects")
	  ("tt" "Task" entry (file+olp "~/personal/OrgDatabase/Tasks.org" "Inbox") "* TODO %?\n %U\n %a\n %i" :empty-lines 1)

	  ("j" "Journal Entries")
	  ("jj" "Journal" entry
	   (file+olp+datetree "~/personal/OrgDatabase/Journal.org")
	   "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
	   :clock-in :clock-resume
	   :empty-lines 1)
	  ("jm" "Meeting" entry
	   (file+olp+datetree "~/personal/OrgDatabase/Journal.org")
	   "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
	   :clock-in :clock-resume
	   :empty-lines 1)
	  ("e" "Expenses" table-line (file+headline "~/personal/OrgDatabase/Expenses.org" "Current")
	   "| %U | %^{Item} | %^{Value} |" :kill-buffer t)))
  
  (jef/org-font-setup))
#+end_src

** Bullets

#+begin_src emacs-lisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Visual Fill Column

#+begin_src emacs-lisp
(defun jef/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
	visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :defer t
  :hook (org-mode . jef/org-mode-visual-fill))
#+end_src

** Org Tempo

#+begin_src emacs-lisp
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src
